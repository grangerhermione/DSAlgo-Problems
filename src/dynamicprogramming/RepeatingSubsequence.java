package dynamicprogramming;
/*
 *Given a string A, find if there is any subsequence that repeats itself.

A subsequence of a string is defined as a sequence of characters generated by deleting 
some characters in the string without changing the order of the remaining characters.

NOTE : sub-sequence length should be greater than or equal to 2.
 */

import java.util.HashMap;

public class RepeatingSubsequence {
	public int anytwo(String A) {
		HashMap<Character,Integer> hm=new HashMap<>();
		int n=A.length();
		for(int i=0;i<n;i++){
			if(hm.containsKey(A.charAt(i))){
				int c=hm.get(A.charAt(i));
				hm.put(A.charAt(i), c+1);
				if(c+1>3){
					return 1;
				}
			}
			else{
				hm.put(A.charAt(i), 1);
			}
		}
		StringBuilder sb=new StringBuilder();
		for(int i=0;i<n;i++){
			if(hm.get(A.charAt(i))>1){
				sb.append(String.valueOf(A.charAt(i)));
			}
		}
		String ns=sb.toString();
		int k=ns.length();
		if(isPalin(ns,0,k-1)){
			if(k%2!=0){
				return ns.charAt(k/2)==ns.charAt(k/2-1)?1:0;
			}
			return 0;
		}
		return 1;
	}

	private boolean isPalin(String str, int l, int h){
		while(l<=h){
			if(str.charAt(l++)!=str.charAt(h--)){
				return false;
			}
		}
		return true;
	}
}
